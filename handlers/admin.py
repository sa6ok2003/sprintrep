from aiogram import types
from misc import dp, bot
import sqlite3
from aiogram.dispatcher import FSMContext
from .sqlit import stata_user
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio

ADMIN_ID_1 = 494588959 #C–∞–Ω—è
ADMIN_ID_2 = 44520977 #–ö–æ–ª—è
ADMIN_ID_3 = 941730379 #–ë–µ–∫–∏—Ä

ADMIN_ID =[ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3]

class reg(StatesGroup):
    name = State()
    fname = State()

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()

class reg0(StatesGroup):
    name0 = State()
    fname0 = State()

@dp.message_handler(commands=['admin'])
async def admin_ka(message: types.Message):
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_b = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞, –∫—Ç–æ –ø—Ä–æ—à–µ–ª —Å–ø—Ä–∏–Ω—Ç', callback_data='write_message')
        bat_—Å = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞, –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª —Å–ø—Ä–∏–Ω—Ç', callback_data='write_message0')
        bat_d = types.InlineKeyboardButton(text='–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='baza')
        markup.add(bat_a)
        markup.add(bat_b)
        markup.add(bat_—Å)
        markup.add(bat_d)
        await bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:',reply_markup=markup)

@dp.callback_query_handler(text='baza')
async def baza1(call: types.callback_query):
    a = open('server.db','rb')
    await bot.send_document(chat_id=call.message.chat.id, document=a)

@dp.callback_query_handler(text='list_members')
async def admin_1(call: types.callback_query):
    status = stata_user()
    status0 = status[0]
    status1 = status[1]
    mes = await bot.send_message(call.message.chat.id, f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status0+status1}\n\n'
                                                 f'–ü—Ä–æ—à–ª–∏ —Å–ø—Ä–∏–Ω—Ç: {status1}\n\n'
                                                 f'–ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Å–ø—Ä–∏–Ω—Ç: {status0}')
    await asyncio.sleep(10)
    await bot.delete_message(message_id=mes.message_id,chat_id=call.message.chat.id)





########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################

@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    await state.update_data(key = 1)
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ —é–∑–µ—Ä–∞–º –∫—Ç–æ –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç',
                           reply_markup=murkap)
    await st_reg.step_q.set()


@dp.callback_query_handler(text='write_message0')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check12(call: types.callback_query, state: FSMContext):
    await state.update_data(key= 0)

    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ —é–∑–µ—Ä–∞–º –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç',
                           reply_markup=murkap)
    await st_reg.step_q.set()



@dp.callback_query_handler(text='otemena',state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()



@dp.message_handler(state=st_reg.step_q,content_types=['text','photo','video','video_note']) # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id,text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ',reply_markup=murkap)



# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but',state=st_reg.st_name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id,text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot\n\n'
                                                     '–ü–æ–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É')
    await st_reg.step_regbutton.set()


@dp.message_handler(state=st_reg.step_regbutton,content_types=['text']) # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr2 = message.text.split('-')

    k = -1  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    for i in arr2:
        k+=1
        if i[0] == ' ':
            if i[-1] == ' ':
                arr2[k] = (i[1:-1])
            else:
                arr2[k] = (i[1:])

        else:
            if i[-1] == ' ':

                arr2[0] = (i[:-1])
            else:
                pass

    # arr2 - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏


    try:
        murkap = types.InlineKeyboardMarkup() #–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bat = types.InlineKeyboardButton(text= arr2[0], url=arr2[1])
        murkap.add(bat)

        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,message_id=mess.message_id,reply_markup=murkap)

        await state.update_data(text_but =arr2[0]) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=arr2[1])  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id,text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù',reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id,text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras',state="*") # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    d = await state.get_data()
    key = d['key']
    db = sqlite3.connect('server.db')
    sql = db.cursor()


    if int(key) == (int (1)):
        users = sql.execute("SELECT id FROM user_time WHERE status_ref = 1").fetchall()

    else:
        users = sql.execute("SELECT id FROM user_time WHERE status_ref = 0").fetchall()


    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

    data = await state.get_data()
    mess = data['q'] # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    try: #–ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_but = data['text_but']
        url_but = data['url_but']
        bat = types.InlineKeyboardButton(text=text_but, url=url_but)
        murkap.add(bat)
    except: pass



    await state.finish()
    bad = 0
    good = 0
    await bot.send_message(call.message.chat.id, f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")
    for i in users:
        await asyncio.sleep(1)
        try:
            await mess.copy_to(i[0],reply_markup=murkap)
            good += 1
        except:
            bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> <code>{bad}</code>",
        parse_mode="html"
    )
#########################################################